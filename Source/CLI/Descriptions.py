from dublib.CLI.Terminalyzer import Command, ParametersTypes
from dublib.CLI.TextStyler import TextStyler

CommandsList: list[Command] = list()

Com = Command("build-manga", "Build readable manga.")
ComPos = Com.create_position("SOURCE", "Title's data.", important = True)
ComPos.add_argument(description = "Filename of local JSON.")
ComPos = Com.create_position("PARSER", "Name of parser.", important = True)
ComPos.add_key("use", ParametersTypes.Text, "Parser name.")
ComPos = Com.create_position("TARGET", "Target for building.")
ComPos.add_key("branch", ParametersTypes.Number, "Branch ID.")
ComPos.add_key("chapter", ParametersTypes.Number, "Chapter ID.")
ComPos = Com.create_position("BUILDER", "Type of building system.")
ComPos.add_flag("simple", "Download images in directories (default).")
ComPos.add_flag("zip", "Make *.ZIP archives.")
ComPos.add_flag("cbz", "Make *.CBZ files.")
Com.add_key("ch-template", description = "Template for chapters naming. Available {number} and {name} replacements.")
Com.add_key("vol-template", description = "Template for volumes naming. Available {number} replacement.")
Com.add_flag("v", description = "Enable chapters sorting by volumes directories.")
CommandsList.append(Com)

CollectionFileBold = TextStyler("Collection.txt").decorate.italic
Com = Command("collect", f"Collect titles slugs into {CollectionFileBold} file.")
ComPos = Com.create_position("PARSER", "Name of parser.", important = True)
ComPos.add_key("use", ParametersTypes.Text, "Parser name.")
Com.add_flag("f", "Enable force mode.")
Com.add_flag("local", "Scan local titles and put into collection.")
Com.add_flag("sort", "Enable slugs sorting.")
Com.add_key("filters", description = "Query string for filtering titles (supporting optional).")
Com.add_key("pages", ParametersTypes.Number, "Count of pages to collecting.")
Com.add_key("period", ParametersTypes.Number, "Period in hours for parsing updates.")
CommandsList.append(Com)

Com = Command("get", "Download image.")
ComPos = Com.create_position("URL", "Image source.")
ComPos.add_argument(ParametersTypes.URL, "Link to image.")
ComPos = Com.create_position("PARSER", "Name of parser.", important = True)
ComPos.add_key("use", ParametersTypes.Text, "Parser name.")
ComPos = Com.create_position("NAME", "Type of naming.")
ComPos.add_key("fullname", description = "Full name of file.")
ComPos.add_key("name", description = "Name of file without type.")
Com.add_flag("f", "Enable force mode.")
Com.add_key("dir", ParametersTypes.ValidPath, "Output directory.")
CommandsList.append(Com)

Com = Command("init", "Initialize new parser or extension directory for development.")
ComPos = Com.create_position("TYPE", "Type of module.", important = True)
ComPos.add_flag("e", "Extension.")
ComPos.add_flag("p", "Parser.")
ComPos = Com.create_position("NAME", "Parser or extension name.", important = True)
ComPos.add_argument(ParametersTypes.All, description = "Extension name.")
ComPos.add_argument(ParametersTypes.Text, description = "Parser name.")
ComPos = Com.create_position("CONTENT", "Parser content type.")
ComPos.add_key("content", ParametersTypes.Text, description = "Parser content type (manga, ranobe).")
CommandsList.append(Com)

Com = Command("install", "Run installation assistant.")
Com.add_flag("a", "Add alias to venv activate script.")
Com.add_flag("c", "Copy parsers and extensions default settings in Configs if not exists.")
Com.add_flag("all", "Full installation.")
Com.add_flag("r", "Install parsers requirements (only Python packages).")
Com.add_flag("s", "Running parsers installation scripts.")
CommandsList.append(Com)

Com = Command("list", "Print list of installed parsers.")
CommandsList.append(Com)

Com = Command("parse", "Start titles parsing.")
ComPos = Com.create_position("TARGET", "Target for parsing.", important = True)
ComPos.add_argument(description = "Title slug.")
ComPos.add_flag("collection", "Parse slugs from Collection.txt file.")
ComPos.add_flag("local", "Parse all locally saved titles.")
ComPos.add_flag("updates", "Parse titles updated for last 24 hours.")
ComPos = Com.create_position("PARSER", "Name of parser.", important = True)
ComPos.add_key("use", ParametersTypes.Text, "Parser name.")
Com.add_key("period", ParametersTypes.Number, "Period in hours for parsing updates.")
Com.add_key("from", description = "Skip titles before this slug.")
Com.add_flag("f", "Enable force mode.")
CommandsList.append(Com)

Com = Command("repair", "Repair chapter content in locally saved title.")
ComPos = Com.create_position("FILENAME", "Source file.", important = True)
ComPos.add_argument(description = "Filename of locally saved title.")
ComPos = Com.create_position("TARGET", "Target for repairing.", important = True)
ComPos.add_key("chapter", ParametersTypes.Number, "Chapter ID.")
ComPos = Com.create_position("PARSER", "Name of parser.", important = True)
ComPos.add_key("use", ParametersTypes.Text, "Parser name.")
CommandsList.append(Com)

Com = Command("run", "Run specific modules.")
ComPos = Com.create_position("TARGET", "Target to run.", important = True)
ComPos.add_key("extension", description = "Extension full name.")
Com.add_flag("f", "Enable force mode.")
Com.add_key("command", description = "Extension command.")
CommandsList.append(Com)

Com = Command("tagger", "Process titles classificators.")
ComPos = Com.create_position("INPUT", "Input data.", important = True)
ComPos.add_key("classificator", ParametersTypes.All, "Unknown type of classificator.")
ComPos.add_key("genre", ParametersTypes.All, "Genre.")
ComPos.add_key("franchise", ParametersTypes.All, "Franchise.")
ComPos.add_key("tag", ParametersTypes.All, "Tag.")
ComPos = Com.create_position("PARSER", "Parser name to determine source rules.")
ComPos.add_key("use", ParametersTypes.Text, "Parser name.")
ComPos = Com.create_position("OUTPUT", "Output mode.")
ComPos.add_flag("print", "Styled print in console (default).")
ComPos.add_flag("json", "Prints JSON-string in console.")
ComPos.add_key("file", description = "Path to dump JSON file.")
CommandsList.append(Com)